version: '3'

networks:
  omnivore_backend:
    name: "omnivore_backend"
  gateway:
    external: true
    name: "gateway"

services:
  postgres:
    image: "ankane/pgvector:v0.5.1"
    container_name: "omnivore-postgres"
    user: postgres
    healthcheck:
      test: "exit 0"
      interval: 2s
      timeout: 12s
      retries: 3
    networks:
      - "omnivore_backend"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: omnivore

  migrate:
    image: "$IMAGE_REPO_HOST/omnivore-migrate:latest"
    container_name: "omnivore-migrate"
    command: '/bin/sh ./packages/db/setup.sh' # Also create a demo user with email: demo@omnivore.app, password: demo_password
    networks:
      - "omnivore_backend"
    environment:
      - PGPASSWORD=postgres
      - POSTGRES_USER=postgres
      - PG_HOST=postgres
      - PG_PASSWORD=app_pass
      - PG_DB=omnivore
    depends_on:
      postgres:
        condition: service_healthy

  api:
    image: "$IMAGE_REPO_HOST/omnivore-api:latest"
    container_name: "omnivore-api"
    networks:
      - "gateway"
      - "omnivore_backend"
    ports:
      - "4000:8080"
    healthcheck:
      test: ["CMD-SHELL", "nc -z 0.0.0.0 8080 || exit 1"]
      interval: 15s
      timeout: 90s
    environment:
      - API_ENV=local
      - PG_HOST=postgres
      - PG_USER=app_user
      - PG_PASSWORD=app_pass
      - PG_DB=omnivore
      - PG_PORT=5432
      - PG_POOL_MAX=20
      - JAEGER_HOST=jaeger
      - IMAGE_PROXY_SECRET=some-secret
      - JWT_SECRET=some_secret
      - SSO_JWT_SECRET=some_sso_secret
      - CLIENT_URL=http://localhost:3000
      - GATEWAY_URL=http://localhost:8080/api
      - CONTENT_FETCH_URL=http://content-fetch:8080/?token=some_token
      - REDIS_URL='redis://redis:6379'
    depends_on:
      migrate:
        condition: service_completed_successfully

  web:
    image: "$IMAGE_REPO_HOST/omnivore-web:latest"
    container_name: "omnivore-web"
    ports:
      - "3000:8080"
    networks:
      - "gateway"
      - "omnivore_backend"
    environment:
      - NEXT_PUBLIC_APP_ENV=prod
      - NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL
      - NEXT_PUBLIC_SERVER_BASE_URL=$NEXT_PUBLIC_SERVER_BASE_URL
      - NEXT_PUBLIC_HIGHLIGHTS_BASE_URL=$NEXT_PUBLIC_HIGHLIGHTS_BASE_URL
    depends_on:
      api:
        condition: service_healthy

  content-fetch:
    image: "$IMAGE_REPO_HOST/omnivore-content-fetch:latest"
    container_name: "omnivore-content-fetch"
    networks:
      - "omnivore_backend"
    ports:
      - "9090:8080"
    environment:
      - JWT_SECRET=$JWT_SECRET
      - VERIFICATION_TOKEN=$VERIFICATION_TOKEN
      - REST_BACKEND_ENDPOINT=http://api:8080/api
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy

  redis:
    image: "redis:7.2.4"
    container_name: "omnivore-redis"
    networks:
      - "omnivore_backend"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]